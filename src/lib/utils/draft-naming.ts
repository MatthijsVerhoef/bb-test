import { TrailerFormData } from "@/components/add-trailer/types";
import { DraftNamingContext } from "@/types/drafts";

/**
 * Generates a smart auto name for a trailer draft based on filled form data
 */
export function generateDraftAutoName(formData: TrailerFormData): string {
  const context: DraftNamingContext = {
    trailerType: formData.trailerType,
    customType: formData.customType,
    city: formData.location?.city,
    pricePerDay: formData.pricing?.pricePerDay,
    brand: formData.details?.brand,
    model: formData.details?.model,
  };

  return buildDraftName(context);
}

/**
 * Builds a draft name from naming context
 */
function buildDraftName(context: DraftNamingContext): string {
  const parts: string[] = [];

  // 1. Start with trailer type (most important)
  if (context.trailerType === "Overig" && context.customType) {
    parts.push(context.customType);
  } else if (context.trailerType) {
    parts.push(context.trailerType);
  } else {
    parts.push("Nieuwe trailer");
  }

  // 2. Add location if available
  if (context.city) {
    parts.push(context.city);
  }

  // 3. Add price if available
  if (context.pricePerDay && context.pricePerDay > 0) {
    parts.push(`â‚¬${context.pricePerDay}/dag`);
  }

  // 4. Add brand/model if available and no price yet
  if (!context.pricePerDay && (context.brand || context.model)) {
    const brandModel = [context.brand, context.model].filter(Boolean).join(" ");
    if (brandModel) {
      parts.push(brandModel);
    }
  }

  // 5. If still only one part, add timestamp for uniqueness
  if (parts.length === 1) {
    const now = new Date();
    const timeString = now.toLocaleString("nl-NL", {
      day: "numeric",
      month: "short",
      hour: "2-digit",
      minute: "2-digit",
    });
    parts.push(timeString);
  }

  return parts.join(" - ");
}

/**
 * Gets the display name for a draft (custom name or auto name)
 */
export function getDraftDisplayName(
  autoGeneratedName: string,
  userCustomName?: string
): string {
  return userCustomName || autoGeneratedName;
}

/**
 * Validates if a custom name is acceptable
 */
export function validateCustomDraftName(name: string): {
  isValid: boolean;
  error?: string;
} {
  if (!name.trim()) {
    return { isValid: false, error: "Naam mag niet leeg zijn" };
  }

  if (name.length < 2) {
    return { isValid: false, error: "Naam moet minimaal 2 karakters zijn" };
  }

  if (name.length > 100) {
    return { isValid: false, error: "Naam mag maximaal 100 karakters zijn" };
  }

  // Check for invalid characters
  const invalidChars = /[<>:"\/\\|?*]/;
  if (invalidChars.test(name)) {
    return { isValid: false, error: "Naam bevat ongeldige karakters" };
  }

  return { isValid: true };
}

/**
 * Suggests alternative names if a custom name is taken
 */
export function suggestAlternativeNames(
  baseName: string,
  existingNames: string[]
): string[] {
  const suggestions: string[] = [];
  const baseNameLower = baseName.toLowerCase().trim();

  // Try with numbers
  for (let i = 2; i <= 5; i++) {
    const suggestion = `${baseName} (${i})`;
    if (!existingNames.some(name => name.toLowerCase() === suggestion.toLowerCase())) {
      suggestions.push(suggestion);
    }
  }

  // Try with descriptive words
  const descriptors = ["Nieuw", "Extra", "Backup", "Alternatief"];
  for (const descriptor of descriptors) {
    const suggestion = `${descriptor} ${baseName}`;
    if (!existingNames.some(name => name.toLowerCase() === suggestion.toLowerCase())) {
      suggestions.push(suggestion);
    }
  }

  return suggestions.slice(0, 3); // Return max 3 suggestions
}

/**
 * Checks if form data has enough content to generate a meaningful name
 */
export function shouldTriggerAutoSave(formData: TrailerFormData): boolean {
  // Auto-save if user has filled at least the trailer type
  return Boolean(
    formData.trailerType ||
    formData.location?.city ||
    formData.pricing?.pricePerDay ||
    formData.details?.brand
  );
}

/**
 * Determines the save priority for auto-save
 */
export function getDraftSavePriority(formData: TrailerFormData): "low" | "medium" | "high" {
  let score = 0;

  if (formData.trailerType) score += 1;
  if (formData.location?.city) score += 1;
  if (formData.pricing?.pricePerDay) score += 1;
  if (formData.details?.brand) score += 1;
  if (formData.images && formData.images.length > 0) score += 2;

  if (score >= 4) return "high";
  if (score >= 2) return "medium";
  return "low";
}