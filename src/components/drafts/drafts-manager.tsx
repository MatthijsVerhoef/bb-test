"use client";

import { useState, useEffect } from "react";
import { useRouter } from "next/navigation";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
} from "@/components/ui/alert-dialog";
import {
  FileText,
  Edit3,
  Trash2,
  Calendar,
  Plus,
  RefreshCw,
} from "lucide-react";
import { TrailerDraft } from "@/types/drafts";
import { draftService } from "@/services/draft.service";
import {
  getDraftDisplayName,
  validateCustomDraftName,
} from "@/lib/utils/draft-naming";

interface DraftsManagerProps {
  trigger?: React.ReactNode;
}

export function DraftsManager({ trigger }: DraftsManagerProps) {
  const router = useRouter();
  const [drafts, setDrafts] = useState<TrailerDraft[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string>("");
  const [isOpen, setIsOpen] = useState(false);

  // Edit state
  const [editingDraft, setEditingDraft] = useState<string | null>(null);
  const [editName, setEditName] = useState("");
  const [editError, setEditError] = useState("");

  // Delete state
  const [deletingDraft, setDeletingDraft] = useState<TrailerDraft | null>(null);

  // Load drafts
  const loadDrafts = () => {
    if (!draftService.isDraftSupported()) {
      setError("Concepten worden niet ondersteund in deze browser");
      setLoading(false);
      return;
    }

    try {
      setLoading(true);
      setError("");
      const fetchedDrafts = draftService.getDrafts();
      setDrafts(fetchedDrafts);
    } catch (err) {
      console.error("Failed to load drafts:", err);
      setError("Kon concepten niet laden");
    } finally {
      setLoading(false);
    }
  };

  // Load drafts when dialog opens
  useEffect(() => {
    if (isOpen) {
      loadDrafts();
    }
  }, [isOpen]);

  // Handle continuing a draft
  const handleContinueDraft = (draft: TrailerDraft) => {
    router.push(`/plaatsen?draft=${draft.id}`);
    setIsOpen(false);
  };

  // Handle renaming a draft
  const handleStartEdit = (draft: TrailerDraft) => {
    setEditingDraft(draft.id);
    setEditName(draft.userCustomName || draft.autoGeneratedName);
    setEditError("");
  };

  const handleSaveEdit = () => {
    if (!editingDraft) return;

    const validation = validateCustomDraftName(editName);
    if (!validation.isValid) {
      setEditError(validation.error || "Ongeldige naam");
      return;
    }

    try {
      const updatedDraft = draftService.updateDraft(editingDraft, {
        userCustomName: editName.trim(),
      });

      setDrafts((prev) =>
        prev.map((draft) => (draft.id === editingDraft ? updatedDraft : draft))
      );

      setEditingDraft(null);
      setEditName("");
      setEditError("");
    } catch (error) {
      console.error("Failed to rename draft:", error);
      setEditError("Kon concept niet hernoemen");
    }
  };

  const handleCancelEdit = () => {
    setEditingDraft(null);
    setEditName("");
    setEditError("");
  };

  // Handle deleting a draft
  const handleDeleteDraft = (draft: TrailerDraft) => {
    try {
      draftService.deleteDraft(draft.id);
      setDrafts((prev) => prev.filter((d) => d.id !== draft.id));
      setDeletingDraft(null);
    } catch (error) {
      console.error("Failed to delete draft:", error);
      setError("Kon concept niet verwijderen");
    }
  };

  // Format date for display
  const formatDate = (date: Date) => {
    return new Intl.DateTimeFormat("nl-NL", {
      day: "numeric",
      month: "short",
      hour: "2-digit",
      minute: "2-digit",
    }).format(new Date(date));
  };

  const defaultTrigger = (
    <Button variant="outline" size="sm">
      <FileText className="w-4 h-4 mr-2" />
      Mijn concepten
    </Button>
  );

  return (
    <>
      <Dialog open={isOpen} onOpenChange={setIsOpen}>
        <DialogTrigger asChild>{trigger || defaultTrigger}</DialogTrigger>
        <DialogContent className="max-w-2xl max-h-[80vh] overflow-y-auto">
          <DialogHeader>
            <div className="flex items-center justify-between">
              <DialogTitle>Mijn concepten</DialogTitle>
              <Button
                variant="ghost"
                size="sm"
                onClick={loadDrafts}
                disabled={loading}
              >
                <RefreshCw
                  className={`w-4 h-4 ${loading ? "animate-spin" : ""}`}
                />
              </Button>
            </div>
          </DialogHeader>

          <div className="space-y-4">
            {loading && (
              <div className="flex items-center justify-center py-8">
                <div className="w-6 h-6 border-2 border-gray-300 border-t-blue-600 rounded-full animate-spin"></div>
                <span className="ml-2 text-gray-600">Concepten laden...</span>
              </div>
            )}

            {error && (
              <div className="p-4 bg-red-50 border border-red-200 rounded-lg text-red-800">
                {error}
              </div>
            )}

            {!loading && !error && drafts.length === 0 && (
              <div className="text-center py-8">
                <FileText className="w-12 h-12 text-gray-400 mx-auto mb-3" />
                <p className="text-gray-600 mb-4">
                  Nog geen concepten opgeslagen
                </p>
                <Button
                  onClick={() => {
                    router.push("/plaatsen");
                    setIsOpen(false);
                  }}
                >
                  <Plus className="w-4 h-4 mr-2" />
                  Nieuwe trailer plaatsen
                </Button>
              </div>
            )}

            {!loading && !error && drafts.length > 0 && (
              <div className="space-y-3">
                {drafts.map((draft) => (
                  <div
                    key={draft.id}
                    className="flex items-center justify-between p-4 border border-gray-200 rounded-lg hover:border-gray-300 transition-colors"
                  >
                    <div className="flex-1 min-w-0">
                      {editingDraft === draft.id ? (
                        <div className="space-y-2">
                          <Input
                            value={editName}
                            onChange={(e) => setEditName(e.target.value)}
                            placeholder="Naam voor concept"
                            className="text-sm"
                            onKeyDown={(e) => {
                              if (e.key === "Enter") {
                                handleSaveEdit();
                              } else if (e.key === "Escape") {
                                handleCancelEdit();
                              }
                            }}
                            autoFocus
                          />
                          {editError && (
                            <p className="text-xs text-red-600">{editError}</p>
                          )}
                          <div className="flex gap-2">
                            <Button size="sm" onClick={handleSaveEdit}>
                              Opslaan
                            </Button>
                            <Button
                              size="sm"
                              variant="outline"
                              onClick={handleCancelEdit}
                            >
                              Annuleren
                            </Button>
                          </div>
                        </div>
                      ) : (
                        <>
                          <h3 className="font-medium text-gray-900 truncate">
                            {getDraftDisplayName(
                              draft.autoGeneratedName,
                              draft.userCustomName
                            )}
                          </h3>
                          <div className="flex items-center gap-4 mt-1 text-xs text-gray-500">
                            <span className="flex items-center gap-1">
                              <Calendar className="w-3 h-3" />
                              {formatDate(draft.updatedAt)}
                            </span>
                          </div>
                        </>
                      )}
                    </div>

                    {editingDraft !== draft.id && (
                      <div className="flex items-center gap-2 ml-4">
                        <Button
                          size="sm"
                          onClick={() => handleContinueDraft(draft)}
                        >
                          Verder werken
                        </Button>
                        <Button
                          size="sm"
                          variant="ghost"
                          onClick={() => handleStartEdit(draft)}
                        >
                          <Edit3 className="w-4 h-4" />
                        </Button>
                        <Button
                          size="sm"
                          variant="ghost"
                          onClick={() => setDeletingDraft(draft)}
                        >
                          <Trash2 className="w-4 h-4" />
                        </Button>
                      </div>
                    )}
                  </div>
                ))}
              </div>
            )}
          </div>
        </DialogContent>
      </Dialog>

      {/* Delete confirmation dialog */}
      <AlertDialog
        open={!!deletingDraft}
        onOpenChange={() => setDeletingDraft(null)}
      >
        <AlertDialogContent>
          <AlertDialogHeader>
            <AlertDialogTitle>Concept verwijderen</AlertDialogTitle>
            <AlertDialogDescription>
              Weet je zeker dat je het concept "
              {deletingDraft &&
                getDraftDisplayName(
                  deletingDraft.autoGeneratedName,
                  deletingDraft.userCustomName
                )}
              " wilt verwijderen? Deze actie kan niet ongedaan worden gemaakt.
            </AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel>Annuleren</AlertDialogCancel>
            <AlertDialogAction
              onClick={() => deletingDraft && handleDeleteDraft(deletingDraft)}
              className="bg-red-600 hover:bg-red-700"
            >
              Verwijderen
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>
    </>
  );
}
