import { TrailerFormData } from "@/components/add-trailer/types";

class LocalStorageDraftService {
  private readonly STORAGE_KEY = "trailer_drafts";
  private readonly VERSION_KEY = "draft_version";
  private readonly CURRENT_VERSION = "1.0";

  /**
   * Check if localStorage is supported
   */
  isDraftSupported(): boolean {
    try {
      return typeof localStorage !== "undefined";
    } catch {
      return false;
    }
  }

  /**
   * Get all drafts from localStorage
   */
  getDrafts(): TrailerDraft[] {
    if (!this.isDraftSupported()) return [];

    try {
      const stored = localStorage.getItem(this.STORAGE_KEY);
      if (!stored) return [];

      const drafts = JSON.parse(stored);
      
      // Convert date strings back to Date objects
      return drafts.map((draft: any) => ({
        ...draft,
        createdAt: new Date(draft.createdAt),
        updatedAt: new Date(draft.updatedAt),
      }));
    } catch (error) {
      console.error("Error loading drafts from localStorage:", error);
      return [];
    }
  }

  /**
   * Get a specific draft by ID
   */
  getDraft(id: string): TrailerDraft | null {
    const drafts = this.getDrafts();
    return drafts.find(draft => draft.id === id) || null;
  }

  /**
   * Save drafts to localStorage
   */
  private saveDrafts(drafts: TrailerDraft[]): void {
    if (!this.isDraftSupported()) return;

    try {
      localStorage.setItem(this.STORAGE_KEY, JSON.stringify(drafts));
      localStorage.setItem(this.VERSION_KEY, this.CURRENT_VERSION);
    } catch (error) {
      console.error("Error saving drafts to localStorage:", error);
      throw new Error("Failed to save draft - storage may be full");
    }
  }

  /**
   * Create a new draft
   */
  createDraft(
    autoGeneratedName: string,
    formData: TrailerFormData,
    userCustomName?: string
  ): TrailerDraft {
    if (!this.isDraftSupported()) {
      throw new Error("localStorage is not supported");
    }

    const now = new Date();
    const draft: TrailerDraft = {
      id: `draft_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
      autoGeneratedName,
      userCustomName,
      formData,
      createdAt: now,
      updatedAt: now,
    };

    const drafts = this.getDrafts();
    drafts.unshift(draft); // Add to beginning for recent-first order
    
    this.saveDrafts(drafts);
    return draft;
  }

  /**
   * Update an existing draft
   */
  updateDraft(
    id: string,
    updates: {
      autoGeneratedName?: string;
      userCustomName?: string;
      formData?: TrailerFormData;
    }
  ): TrailerDraft {
    if (!this.isDraftSupported()) {
      throw new Error("localStorage is not supported");
    }

    const drafts = this.getDrafts();
    const draftIndex = drafts.findIndex(draft => draft.id === id);
    
    if (draftIndex === -1) {
      throw new Error("Draft not found");
    }

    const updatedDraft: TrailerDraft = {
      ...drafts[draftIndex],
      ...updates,
      updatedAt: new Date(),
    };

    drafts[draftIndex] = updatedDraft;
    
    // Move to front for recent-first order
    drafts.splice(draftIndex, 1);
    drafts.unshift(updatedDraft);
    
    this.saveDrafts(drafts);
    return updatedDraft;
  }

  /**
   * Delete a draft
   */
  deleteDraft(id: string): void {
    if (!this.isDraftSupported()) return;

    const drafts = this.getDrafts();
    const filteredDrafts = drafts.filter(draft => draft.id !== id);
    
    this.saveDrafts(filteredDrafts);
  }

  /**
   * Clear all drafts
   */
  clearAllDrafts(): void {
    if (!this.isDraftSupported()) return;

    try {
      localStorage.removeItem(this.STORAGE_KEY);
      localStorage.removeItem(this.VERSION_KEY);
    } catch (error) {
      console.error("Error clearing drafts:", error);
    }
  }

  /**
   * Get storage usage info
   */
  getStorageInfo(): { used: number; total: number; draftsCount: number } {
    if (!this.isDraftSupported()) {
      return { used: 0, total: 0, draftsCount: 0 };
    }

    try {
      const drafts = this.getDrafts();
      const draftData = localStorage.getItem(this.STORAGE_KEY) || "";
      const used = new Blob([draftData]).size; // Rough estimate in bytes
      
      // Estimate localStorage limit (usually ~5-10MB)
      let total = 5 * 1024 * 1024; // 5MB default estimate
      
      return {
        used,
        total,
        draftsCount: drafts.length,
      };
    } catch {
      return { used: 0, total: 0, draftsCount: 0 };
    }
  }

  /**
   * Check if we're approaching storage limits
   */
  isStorageNearLimit(): boolean {
    const info = this.getStorageInfo();
    return info.used > (info.total * 0.8); // 80% threshold
  }

  /**
   * Clean up old drafts if storage is getting full
   */
  cleanupOldDrafts(keepCount: number = 10): void {
    if (!this.isDraftSupported()) return;

    const drafts = this.getDrafts();
    
    if (drafts.length > keepCount) {
      // Sort by updatedAt and keep only the most recent
      const sortedDrafts = drafts
        .sort((a, b) => b.updatedAt.getTime() - a.updatedAt.getTime())
        .slice(0, keepCount);
      
      this.saveDrafts(sortedDrafts);
    }
  }

  /**
   * Export drafts as JSON (for backup)
   */
  exportDrafts(): string {
    const drafts = this.getDrafts();
    return JSON.stringify({
      version: this.CURRENT_VERSION,
      exportDate: new Date().toISOString(),
      drafts,
    }, null, 2);
  }

  /**
   * Import drafts from JSON
   */
  importDrafts(jsonData: string): void {
    if (!this.isDraftSupported()) {
      throw new Error("localStorage is not supported");
    }

    try {
      const data = JSON.parse(jsonData);
      
      if (!data.drafts || !Array.isArray(data.drafts)) {
        throw new Error("Invalid draft data format");
      }

      // Convert date strings back to Date objects
      const importedDrafts = data.drafts.map((draft: any) => ({
        ...draft,
        createdAt: new Date(draft.createdAt),
        updatedAt: new Date(draft.updatedAt),
      }));

      const existingDrafts = this.getDrafts();
      const allDrafts = [...importedDrafts, ...existingDrafts];
      
      // Remove duplicates based on ID
      const uniqueDrafts = allDrafts.filter((draft, index, arr) => 
        arr.findIndex(d => d.id === draft.id) === index
      );

      this.saveDrafts(uniqueDrafts);
    } catch (error) {
      console.error("Error importing drafts:", error);
      throw new Error("Failed to import drafts - invalid format");
    }
  }
}

export const draftService = new LocalStorageDraftService();